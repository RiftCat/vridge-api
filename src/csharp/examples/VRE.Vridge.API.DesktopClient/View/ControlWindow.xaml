
    <Window x:Class="VRE.Vridge.API.DesktopTester.View.ControlWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:converters="clr-namespace:VRE.Vridge.API.DesktopTester.Converters"
        xmlns:view="clr-namespace:VRE.Vridge.API.DesktopTester.View"
        Height="500" Width="1000"
        mc:Ignorable="d"
        Icon="../icon.ico"
        Title="VRidge API Tester">
    <Window.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="200" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="100" />
        </Grid.RowDefinitions>
        <Border Grid.Row="0" 
                Grid.Column="0"
                BorderThickness="1"
                BorderBrush="Black">
            <Canvas x:Name="Canvas" 
                    Background="Azure"
                    SizeChanged="FrameworkElement_OnSizeChanged" 
                    ClipToBounds="True"
                    MouseMove="Canvas_OnMouseMove">
                <Ellipse x:Name="Marker"
                         Fill="Yellow" Stroke="Black"
                         Cursor="Hand" ToolTip="Drag this to change position X and Z."
                         Height="{Binding MarkerSize}" 
                         Width="{Binding MarkerSize}"                          
                         Canvas.Left="{Binding MarkerLeftOffset}"
                         Canvas.Top="{Binding MarkerTopOffset}"
                         MouseLeftButtonDown="Marker_OnMouseLeftButtonDown"
                         MouseLeftButtonUp="Marker_OnMouseLeftButtonUp"/>
            </Canvas>
        </Border>
        <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Vertical">
            <!-- Mode selection dropdowns -->
            <ComboBox Width="190"  
                      Margin="5 5"
                      ItemsSource="{Binding ControlTargets}"
                      SelectedValue="{Binding SelectedControlTarget}"
                      DisplayMemberPath="Value"
                      SelectedValuePath="Key" />
            <ComboBox Width="190"  
                      Margin="5 0"
                      ItemsSource="{Binding HeadRelations}"
                      SelectedValue="{Binding SelectedHeadRelation}"
                      DisplayMemberPath="Value"
                      SelectedValuePath="Key" 
                      Visibility="{Binding IsControllingControllers, Converter={StaticResource BoolToVisibilityConverter}}" />
            <ComboBox Width="190"  
                      Margin="5 0"
                      ItemsSource="{Binding HeadTrackingModes}"
                      SelectedValue="{Binding SelectedHeadTrackingMode}"
                      DisplayMemberPath="Value"
                      SelectedValuePath="Key" 
                      Visibility="{Binding IsControllingHeadTracking, Converter={StaticResource BoolToVisibilityConverter}}" />
            <GroupBox Header="Position" Visibility="{Binding IsPositionalControlVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                <!-- Position sliders -->
                <StackPanel Orientation="Vertical">
                    <view:LabeledSlider Label="X" Minimum="-3" Maximum="3" SliderValue="{Binding PositionX, Mode=TwoWay}" />
                    <view:LabeledSlider Label="Y" Minimum="-1" Maximum="3" SliderValue="{Binding PositionY, Mode=TwoWay}" />
                    <view:LabeledSlider Label="Z" Minimum="-3" Maximum="3" SliderValue="{Binding PositionZ, Mode=TwoWay}" />
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Rotation" Visibility="{Binding IsRotationalControlVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                <!-- Rotation sliders -->
                <StackPanel Orientation="Vertical">
                    <view:LabeledSlider Label="Yaw" Minimum="-180" Maximum="180" SliderValue="{Binding Yaw, Mode=TwoWay}" />
                    <view:LabeledSlider Label="Pitch" Minimum="-90" Maximum="90" SliderValue="{Binding Pitch, Mode=TwoWay}" Visibility="{Binding IsPitchAndRollControlVisible , Converter={StaticResource BoolToVisibilityConverter}}" />
                    <view:LabeledSlider Label="Roll" Minimum="-180" Maximum="180" SliderValue="{Binding Roll, Mode=TwoWay}" Visibility="{Binding IsPitchAndRollControlVisible , Converter={StaticResource BoolToVisibilityConverter}}"/>
                </StackPanel>
            </GroupBox>
        </StackPanel>
        <!-- Control buttons -->
        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Vertical" HorizontalAlignment="Stretch" Margin="10">
            <Button Height="20" Content="Discover" Command="{Binding Discover}"></Button>
            <Button Height="20" Content="Status" Command="{Binding CheckStatus}"></Button>
            <TextBlock Margin="0 0 0 0" Width="150" TextWrapping="Wrap" VerticalAlignment="Center" TextAlignment="Left" Background="Transparent" Text="{Binding HapticPulseInfo}" ></TextBlock>
        </StackPanel>
        
        <!-- Motion controller button states -->
        <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal" HorizontalAlignment="Stretch" Margin="10" Visibility="{Binding IsControllingControllers, Converter={StaticResource BoolToVisibilityConverter}}">
            <ToggleButton Height="70" Width="100" Content="Menu" IsChecked="{Binding IsMenuPressed}"></ToggleButton>
            <ToggleButton Height="70" Width="100" Content="System" IsChecked="{Binding IsSystemPressed}"></ToggleButton>
            <GroupBox Header="Trackpad" Margin="1">
                <StackPanel Orientation="Vertical">
                    <view:LabeledSlider Label="X" Minimum="-1" Maximum="1" SliderValue="{Binding AnalogX, Mode=TwoWay}"></view:LabeledSlider>
                    <view:LabeledSlider Label="Y" Minimum="-1" Maximum="1" SliderValue="{Binding AnalogY, Mode=TwoWay}"></view:LabeledSlider>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Trigger">
                <StackPanel Orientation="Vertical">
                    <view:LabeledSlider Width="200" Label="Trigger" Minimum="0" Maximum="1" SliderValue="{Binding AnalogTrigger, Mode=TwoWay}"></view:LabeledSlider>
                    <ToggleButton Content="Trigger Pressed" IsChecked="{Binding IsTriggerPressed}"/>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Buttons" MinWidth="150">
                <StackPanel Orientation="Vertical">
                    <ToggleButton Content="Grip Pressed" IsChecked="{Binding IsGripPressed}"/>
                    <GroupBox Header="Touchpad">
                        <StackPanel Orientation="Horizontal">
                            <ToggleButton Content="Touched" IsChecked="{Binding IsTouchpadTouched}"/>
                            <ToggleButton Content="Pressed" IsChecked="{Binding IsTouchpadPressed}"/>
                        </StackPanel>

                    </GroupBox>
                </StackPanel>
            </GroupBox>
        </StackPanel>

        <!-- HMD specific controls -->
        <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal" HorizontalAlignment="Stretch" Margin="10"  Visibility="{Binding IsControllingHeadTracking, Converter={StaticResource BoolToVisibilityConverter}}">
            <Button Content="Recenter view" Height="40" Width="100" Command="{Binding Recenter}"></Button>
            <Button Content="Reset async offset" Height="40" Width="100" Margin="10 0 0 0" Command="{Binding ResetAsync}"></Button>
        </StackPanel>
    </Grid>
</Window>

